generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Interview {
  id          String     @id @default(cuid())
  userId      String     @default("")  // Set a default empty string or valid user ID
  role        String     @default("Unspecified")  // Default to a placeholder role if needed
  techstack   String[]
  questions   Question[] // Relationship to Question model
  finalized   Boolean    @default(false)  // Default to false
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  // Make updatedAt nullable temporarily
}

model Question {
  id          String   @id @default(cuid())
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id])
  type        String    // TECHNICAL, BEHAVIORAL, GENERAL
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bio             String?
  experience      Int?
  skills          String[]
  assessments     assessment[]
  coverLetter     CoverLetter[]
  resume          Resume?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
}

model assessment {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  quizScore     Float     // Overall quiz score
  questions     Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category      String    // "Technical", "Behavioral", etc.
  improvementTip String?  // AI-generated improvement tip
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  content   String
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  status         String   @default("draft")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model IndustryInsight {
  id                String        @id @default(cuid())
  industry          String        @unique
  salaryRanges      Json[]
  growthRate        Float
  demandLevel       DemandLevel
  topSkills         String[]
  marketOutlook     MarketOuTlook
  keyTrends         String[]
  recommendedSkills String[]
  lastUpdated       DateTime      @default(now())
  nextUpdate        DateTime
  users             User[]

  @@index([industry])
}

model WorkDescription {
  id          String   @id @default(uuid())
  userId      String   @unique // Ensure unique userId for a one-to-one relation
  companyName String
  position    String
  content     String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}



enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOuTlook {
  POSITIVE
  NEGATIVE
  NEUTRAL
}
